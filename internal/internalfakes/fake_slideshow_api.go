// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/petewall/eink-radiator/v2/internal"
)

type FakeSlideshowAPI struct {
	GetSlideStub        func(string) *internal.Slide
	getSlideMutex       sync.RWMutex
	getSlideArgsForCall []struct {
		arg1 string
	}
	getSlideReturns struct {
		result1 *internal.Slide
	}
	getSlideReturnsOnCall map[int]struct {
		result1 *internal.Slide
	}
	GetSlideConfigStub        func() *internal.SlideConfig
	getSlideConfigMutex       sync.RWMutex
	getSlideConfigArgsForCall []struct {
	}
	getSlideConfigReturns struct {
		result1 *internal.SlideConfig
	}
	getSlideConfigReturnsOnCall map[int]struct {
		result1 *internal.SlideConfig
	}
	GetSlidesStub        func() []*internal.Slide
	getSlidesMutex       sync.RWMutex
	getSlidesArgsForCall []struct {
	}
	getSlidesReturns struct {
		result1 []*internal.Slide
	}
	getSlidesReturnsOnCall map[int]struct {
		result1 []*internal.Slide
	}
	NextSlideStub        func()
	nextSlideMutex       sync.RWMutex
	nextSlideArgsForCall []struct {
	}
	PreviousSlideStub        func()
	previousSlideMutex       sync.RWMutex
	previousSlideArgsForCall []struct {
	}
	StartStub        func()
	startMutex       sync.RWMutex
	startArgsForCall []struct {
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlideshowAPI) GetSlide(arg1 string) *internal.Slide {
	fake.getSlideMutex.Lock()
	ret, specificReturn := fake.getSlideReturnsOnCall[len(fake.getSlideArgsForCall)]
	fake.getSlideArgsForCall = append(fake.getSlideArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSlideStub
	fakeReturns := fake.getSlideReturns
	fake.recordInvocation("GetSlide", []interface{}{arg1})
	fake.getSlideMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSlideshowAPI) GetSlideCallCount() int {
	fake.getSlideMutex.RLock()
	defer fake.getSlideMutex.RUnlock()
	return len(fake.getSlideArgsForCall)
}

func (fake *FakeSlideshowAPI) GetSlideCalls(stub func(string) *internal.Slide) {
	fake.getSlideMutex.Lock()
	defer fake.getSlideMutex.Unlock()
	fake.GetSlideStub = stub
}

func (fake *FakeSlideshowAPI) GetSlideArgsForCall(i int) string {
	fake.getSlideMutex.RLock()
	defer fake.getSlideMutex.RUnlock()
	argsForCall := fake.getSlideArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSlideshowAPI) GetSlideReturns(result1 *internal.Slide) {
	fake.getSlideMutex.Lock()
	defer fake.getSlideMutex.Unlock()
	fake.GetSlideStub = nil
	fake.getSlideReturns = struct {
		result1 *internal.Slide
	}{result1}
}

func (fake *FakeSlideshowAPI) GetSlideReturnsOnCall(i int, result1 *internal.Slide) {
	fake.getSlideMutex.Lock()
	defer fake.getSlideMutex.Unlock()
	fake.GetSlideStub = nil
	if fake.getSlideReturnsOnCall == nil {
		fake.getSlideReturnsOnCall = make(map[int]struct {
			result1 *internal.Slide
		})
	}
	fake.getSlideReturnsOnCall[i] = struct {
		result1 *internal.Slide
	}{result1}
}

func (fake *FakeSlideshowAPI) GetSlideConfig() *internal.SlideConfig {
	fake.getSlideConfigMutex.Lock()
	ret, specificReturn := fake.getSlideConfigReturnsOnCall[len(fake.getSlideConfigArgsForCall)]
	fake.getSlideConfigArgsForCall = append(fake.getSlideConfigArgsForCall, struct {
	}{})
	stub := fake.GetSlideConfigStub
	fakeReturns := fake.getSlideConfigReturns
	fake.recordInvocation("GetSlideConfig", []interface{}{})
	fake.getSlideConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSlideshowAPI) GetSlideConfigCallCount() int {
	fake.getSlideConfigMutex.RLock()
	defer fake.getSlideConfigMutex.RUnlock()
	return len(fake.getSlideConfigArgsForCall)
}

func (fake *FakeSlideshowAPI) GetSlideConfigCalls(stub func() *internal.SlideConfig) {
	fake.getSlideConfigMutex.Lock()
	defer fake.getSlideConfigMutex.Unlock()
	fake.GetSlideConfigStub = stub
}

func (fake *FakeSlideshowAPI) GetSlideConfigReturns(result1 *internal.SlideConfig) {
	fake.getSlideConfigMutex.Lock()
	defer fake.getSlideConfigMutex.Unlock()
	fake.GetSlideConfigStub = nil
	fake.getSlideConfigReturns = struct {
		result1 *internal.SlideConfig
	}{result1}
}

func (fake *FakeSlideshowAPI) GetSlideConfigReturnsOnCall(i int, result1 *internal.SlideConfig) {
	fake.getSlideConfigMutex.Lock()
	defer fake.getSlideConfigMutex.Unlock()
	fake.GetSlideConfigStub = nil
	if fake.getSlideConfigReturnsOnCall == nil {
		fake.getSlideConfigReturnsOnCall = make(map[int]struct {
			result1 *internal.SlideConfig
		})
	}
	fake.getSlideConfigReturnsOnCall[i] = struct {
		result1 *internal.SlideConfig
	}{result1}
}

func (fake *FakeSlideshowAPI) GetSlides() []*internal.Slide {
	fake.getSlidesMutex.Lock()
	ret, specificReturn := fake.getSlidesReturnsOnCall[len(fake.getSlidesArgsForCall)]
	fake.getSlidesArgsForCall = append(fake.getSlidesArgsForCall, struct {
	}{})
	stub := fake.GetSlidesStub
	fakeReturns := fake.getSlidesReturns
	fake.recordInvocation("GetSlides", []interface{}{})
	fake.getSlidesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSlideshowAPI) GetSlidesCallCount() int {
	fake.getSlidesMutex.RLock()
	defer fake.getSlidesMutex.RUnlock()
	return len(fake.getSlidesArgsForCall)
}

func (fake *FakeSlideshowAPI) GetSlidesCalls(stub func() []*internal.Slide) {
	fake.getSlidesMutex.Lock()
	defer fake.getSlidesMutex.Unlock()
	fake.GetSlidesStub = stub
}

func (fake *FakeSlideshowAPI) GetSlidesReturns(result1 []*internal.Slide) {
	fake.getSlidesMutex.Lock()
	defer fake.getSlidesMutex.Unlock()
	fake.GetSlidesStub = nil
	fake.getSlidesReturns = struct {
		result1 []*internal.Slide
	}{result1}
}

func (fake *FakeSlideshowAPI) GetSlidesReturnsOnCall(i int, result1 []*internal.Slide) {
	fake.getSlidesMutex.Lock()
	defer fake.getSlidesMutex.Unlock()
	fake.GetSlidesStub = nil
	if fake.getSlidesReturnsOnCall == nil {
		fake.getSlidesReturnsOnCall = make(map[int]struct {
			result1 []*internal.Slide
		})
	}
	fake.getSlidesReturnsOnCall[i] = struct {
		result1 []*internal.Slide
	}{result1}
}

func (fake *FakeSlideshowAPI) NextSlide() {
	fake.nextSlideMutex.Lock()
	fake.nextSlideArgsForCall = append(fake.nextSlideArgsForCall, struct {
	}{})
	stub := fake.NextSlideStub
	fake.recordInvocation("NextSlide", []interface{}{})
	fake.nextSlideMutex.Unlock()
	if stub != nil {
		fake.NextSlideStub()
	}
}

func (fake *FakeSlideshowAPI) NextSlideCallCount() int {
	fake.nextSlideMutex.RLock()
	defer fake.nextSlideMutex.RUnlock()
	return len(fake.nextSlideArgsForCall)
}

func (fake *FakeSlideshowAPI) NextSlideCalls(stub func()) {
	fake.nextSlideMutex.Lock()
	defer fake.nextSlideMutex.Unlock()
	fake.NextSlideStub = stub
}

func (fake *FakeSlideshowAPI) PreviousSlide() {
	fake.previousSlideMutex.Lock()
	fake.previousSlideArgsForCall = append(fake.previousSlideArgsForCall, struct {
	}{})
	stub := fake.PreviousSlideStub
	fake.recordInvocation("PreviousSlide", []interface{}{})
	fake.previousSlideMutex.Unlock()
	if stub != nil {
		fake.PreviousSlideStub()
	}
}

func (fake *FakeSlideshowAPI) PreviousSlideCallCount() int {
	fake.previousSlideMutex.RLock()
	defer fake.previousSlideMutex.RUnlock()
	return len(fake.previousSlideArgsForCall)
}

func (fake *FakeSlideshowAPI) PreviousSlideCalls(stub func()) {
	fake.previousSlideMutex.Lock()
	defer fake.previousSlideMutex.Unlock()
	fake.PreviousSlideStub = stub
}

func (fake *FakeSlideshowAPI) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
	}{})
	stub := fake.StartStub
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if stub != nil {
		fake.StartStub()
	}
}

func (fake *FakeSlideshowAPI) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeSlideshowAPI) StartCalls(stub func()) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeSlideshowAPI) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	stub := fake.StopStub
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		fake.StopStub()
	}
}

func (fake *FakeSlideshowAPI) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeSlideshowAPI) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeSlideshowAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSlideMutex.RLock()
	defer fake.getSlideMutex.RUnlock()
	fake.getSlideConfigMutex.RLock()
	defer fake.getSlideConfigMutex.RUnlock()
	fake.getSlidesMutex.RLock()
	defer fake.getSlidesMutex.RUnlock()
	fake.nextSlideMutex.RLock()
	defer fake.nextSlideMutex.RUnlock()
	fake.previousSlideMutex.RLock()
	defer fake.previousSlideMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlideshowAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.SlideshowAPI = new(FakeSlideshowAPI)
