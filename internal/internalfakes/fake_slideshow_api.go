// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/petewall/eink-radiator/v2/internal"
)

type FakeSlideshowAPI struct {
	NextSlideStub        func()
	nextSlideMutex       sync.RWMutex
	nextSlideArgsForCall []struct {
	}
	PreviousSlideStub        func()
	previousSlideMutex       sync.RWMutex
	previousSlideArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlideshowAPI) NextSlide() {
	fake.nextSlideMutex.Lock()
	fake.nextSlideArgsForCall = append(fake.nextSlideArgsForCall, struct {
	}{})
	stub := fake.NextSlideStub
	fake.recordInvocation("NextSlide", []interface{}{})
	fake.nextSlideMutex.Unlock()
	if stub != nil {
		fake.NextSlideStub()
	}
}

func (fake *FakeSlideshowAPI) NextSlideCallCount() int {
	fake.nextSlideMutex.RLock()
	defer fake.nextSlideMutex.RUnlock()
	return len(fake.nextSlideArgsForCall)
}

func (fake *FakeSlideshowAPI) NextSlideCalls(stub func()) {
	fake.nextSlideMutex.Lock()
	defer fake.nextSlideMutex.Unlock()
	fake.NextSlideStub = stub
}

func (fake *FakeSlideshowAPI) PreviousSlide() {
	fake.previousSlideMutex.Lock()
	fake.previousSlideArgsForCall = append(fake.previousSlideArgsForCall, struct {
	}{})
	stub := fake.PreviousSlideStub
	fake.recordInvocation("PreviousSlide", []interface{}{})
	fake.previousSlideMutex.Unlock()
	if stub != nil {
		fake.PreviousSlideStub()
	}
}

func (fake *FakeSlideshowAPI) PreviousSlideCallCount() int {
	fake.previousSlideMutex.RLock()
	defer fake.previousSlideMutex.RUnlock()
	return len(fake.previousSlideArgsForCall)
}

func (fake *FakeSlideshowAPI) PreviousSlideCalls(stub func()) {
	fake.previousSlideMutex.Lock()
	defer fake.previousSlideMutex.Unlock()
	fake.PreviousSlideStub = stub
}

func (fake *FakeSlideshowAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nextSlideMutex.RLock()
	defer fake.nextSlideMutex.RUnlock()
	fake.previousSlideMutex.RLock()
	defer fake.previousSlideMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlideshowAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.SlideshowAPI = new(FakeSlideshowAPI)
